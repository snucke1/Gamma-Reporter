name: Collect SPX Gamma Exposure (30-min)

on:
  # Cash session windows in UTC. We'll also check "is NYSE open?" inside the job.
  schedule:
    - cron: '30 13 * * 1-5'      # 13:30 UTC (EDT open)
    - cron: '0,30 14-20 * * 1-5' # 14:00â€“20:30 UTC (EDT mid-session)
    - cron: '0,30 21 * * 1-5'    # 21:00 UTC (EST overlap / handle DST)
  workflow_dispatch:             # allows manual run from the Actions tab

permissions:
  contents: write                # allow this job to commit data back to the repo

jobs:
  collect:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install pandas pandas_market_calendars pyarrow

      - name: Skip if market closed (NYSE)
        id: nyse
        run: |
          python - << 'PY'
          import sys, datetime, pandas_market_calendars as mcal
          now = datetime.datetime.now(datetime.timezone.utc)
          nyse = mcal.get_calendar('XNYS')
          sched = nyse.schedule(start_date=now.date(), end_date=now.date())
          is_open = nyse.open_at_time(sched, now)
          print(f"UTC now: {now.isoformat()}  |  NYSE open: {is_open}")
          sys.exit(0 if is_open else 78)
          PY

      - name: Collect & save snapshot
        if: steps.nyse.outcome == 'success'
        run: |
          mkdir -p scripts data/intraday
          python scripts/collector.py --out snapshot.json

          # Save a timestamped JSON and also append to a Parquet file
          mkdir -p data/intraday/$(date -u +'%Y-%m-%d')
          ts=$(date -u +'%Y-%m-%dT%H%M%SZ')
          cp snapshot.json data/intraday/$(date -u +'%Y-%m-%d')/${ts}.json

          python - << 'PY'
          import json, pandas as pd, pyarrow as pa, pyarrow.parquet as pq, datetime, pathlib
          snap = json.load(open("snapshot.json"))
          row = {
              "timestamp_utc": datetime.datetime.utcnow().isoformat(timespec="seconds")+"Z",
              "spot": snap.get("spot"),
              "net_gex": snap.get("net_gex"),
              "net_gex_norm": snap.get("net_gex_norm"),
              "gamma_ratio": snap.get("gamma_ratio"),
              "zero_gamma": snap.get("zero_gamma"),
              "near_density": snap.get("near_density"),
          }
          df = pd.DataFrame([row])
          out = pathlib.Path("data") / "intraday" / "gex_intraday.parquet"
          if out.exists():
              old = pq.read_table(out)
              new = pa.Table.from_pandas(df)
              pq.write_table(pa.concat_tables([old, new]), out)
          else:
              pq.write_table(pa.Table.from_pandas(df), out)
          PY

      - name: Commit & push
        if: steps.nyse.outcome == 'success'
        run: |
          git config user.name  "github-actions"
          git config user.email "github-actions@github.com"
          git add data/
          git commit -m "GEX snapshot $(date -u +'%Y-%m-%d %H:%MZ')" || echo "No changes"
          git pull --rebase origin ${{ github.ref_name }} || true
          git push
