name: Collect SPX Gamma Exposure (30-min)

on:
  # UTC schedule. We also guard with a market-open check in the job.
  schedule:
    - cron: '30 13 * * 1-5'      # 13:30 UTC ~ US cash open (EDT)
    - cron: '0,30 14-20 * * 1-5' # 14:00â€“20:30 UTC
    - cron: '0,30 21 * * 1-5'    # 21:00 UTC (handles EST overlap)
  workflow_dispatch:             # allow manual runs

permissions:
  contents: write                # allow this workflow to commit data to the repo

env:
  INDEX: SPX                     # change if you want a different underlying

jobs:
  collect:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # gamma_reporter imports these at module import time:
          pip install numpy pandas scipy matplotlib python-dateutil requests
          # For calendar and Parquet/CSV handling:
          pip install pandas_market_calendars pyarrow

      - name: Compute market-open (NYSE) safely
        id: nyse
        run: |
          python - << 'PY'
          import os, datetime
          import pandas_market_calendars as mcal

          now = datetime.datetime.now(datetime.timezone.utc)
          cal = mcal.get_calendar('XNYS')  # NYSE
          # Use a small window so weekends/holidays don't error out:
          start = (now - datetime.timedelta(days=1)).date()
          end   = (now + datetime.timedelta(days=1)).date()
          sched = cal.schedule(start_date=start, end_date=end)

          is_open = False
          if not sched.empty:
            try:
              is_open = cal.open_at_time(sched, now)
            except Exception:
              is_open = False

          print(f"UTC now: {now.isoformat()} | NYSE open: {is_open}")
          with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
            fh.write(f"is_open={'true' if is_open else 'false'}\n")
          PY

      - name: Collect & append to Parquet + CSV (no JSON)
        if: steps.nyse.outputs.is_open == 'true'
        env:
          INDEX: ${{ env.INDEX }}
        run: |
          # Create destination folder once
          mkdir -p data/intraday

          # Run Python inline: import your collector and write directly to Parquet & CSV
          python - << 'PY'
          import os, sys, pathlib
          import pandas as pd
          import pyarrow as pa
          import pyarrow.parquet as pq

          # Ensure we can import scripts/collector.py without __init__.py
          sys.path.append('scripts')
          import collector  # your scripts/collector.py

          index = os.getenv('INDEX', 'SPX')
          snap = collector.make_snapshot(index)  # dict with one row

          # Build a 1-row DataFrame in a stable column order for Excel
          cols = ["timestamp_utc","index","spot","net_gex","gamma_ratio","zero_gamma","near_density"]
          df = pd.DataFrame([[snap.get(c) for c in cols]], columns=cols)

          # ----- Append to Parquet -----
          p_out = pathlib.Path("data") / "intraday" / "gex_intraday.parquet"
          if p_out.exists():
              old = pq.read_table(p_out)
              new = pa.Table.from_pandas(df)
              pq.write_table(pa.concat_tables([old, new]), p_out)
          else:
              pq.write_table(pa.Table.from_pandas(df), p_out)

          # ----- Append to CSV (Excel-friendly) -----
          c_out = pathlib.Path("data") / "intraday" / "gex_intraday.csv"
          if c_out.exists():
              old = pd.read_csv(c_out)
              cat = pd.concat([old, df], ignore_index=True)
              # avoid duplicate rows if a retry happens
              cat = cat.drop_duplicates(subset=["timestamp_utc"], keep="last")
              cat.to_csv(c_out, index=False)
          else:
              df.to_csv(c_out, index=False)

          print("Appended 1 row to Parquet and CSV.")
          PY

      - name: Commit & push data
        if: steps.nyse.outputs.is_open == 'true'
        run: |
          git config user.name  "github-actions"
          git config user.email "github-actions@github.com"
          git add data/
          git commit -m "GEX snapshot $(date -u +'%Y-%m-%d %H:%MZ') (Parquet+CSV only)" || echo "No changes"
          git pull --rebase origin ${{ github.ref_name }} || true
          git push
