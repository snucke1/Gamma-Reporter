name: Collect SPX Gamma Exposure (30-min)

on:
  # 30‑min cadence across regular U.S. session in UTC.
  # 09:30–16:00 ET maps to 13:30–20:00 UTC during EDT, 14:30–21:00 UTC during EST.
  schedule:
    - cron: '30 13 * * 1-5'      # 13:30 UTC (EDT open)
    - cron: '0,30 14-20 * * 1-5' # 14:00–20:30 UTC
    - cron: '0,30 21 * * 1-5'    # 21:00 UTC (EST close half-hour)
  workflow_dispatch:             # manual run if needed

permissions:
  contents: write                # allow commits from this workflow (GITHUB_TOKEN) [2](https://docs.github.com/en/actions/tutorials/authenticate-with-github_token)

jobs:
  collect:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          # Your repo's requirements, plus small extras for calendar+parquet
          pip install -r requirements.txt || true
          pip install pandas pandas_market_calendars pyarrow

      # Optional: protect against running when the market is closed
      - name: Skip if market closed (NYSE)
        id: nyse
        run: |
          python - << 'PY'
          import sys, datetime, pandas as pd
          import pandas_market_calendars as mcal
          now = datetime.datetime.now(datetime.timezone.utc)
          nyse = mcal.get_calendar('XNYS')
          sched = nyse.schedule(start_date=now.date(), end_date=now.date())
          is_open = nyse.open_at_time(sched, now)
          print(f"UTC now: {now.isoformat()}  |  NYSE open: {is_open}")
          # Exit 78 (neutral) lets subsequent steps use `if: steps.nyse.outcome == 'success' && ...` if desired
          sys.exit(0 if is_open else 78)
          PY

      - name: Collect & save snapshot
        if: steps.nyse.outcome == 'success'
        env:
          # If your script needs API keys, add them in Settings > Secrets and reference here:
          # CBOE_API_KEY: ${{ secrets.CBOE_API_KEY }}
          # ANY_OTHER_SECRET: ${{ secrets.ANY_OTHER_SECRET }}
          RUN_UTC: ${{ github.run_started_at }}
        run: |
          # 1) Run your existing collector (replace with your entrypoint)
          # For example, if your repo has a Python CLI:
          #   python gamma_reporter.py --output snapshot.json
          #
          # If you need a thin wrapper, see "collector.py" below.
          python scripts/collector.py --out snapshot.json

          # 2) Place snapshot under a dated folder and also append to a daily parquet
          mkdir -p data/intraday/$(date -u +'%Y-%m-%d')
          ts=$(date -u +'%H%M%SZ')
          cp snapshot.json data/intraday/$(date -u +'%Y-%m-%d')/$(date -u +'%Y-%m-%dT')${ts}.json

          python - << 'PY'
          import json, pandas as pd, pyarrow as pa, pyarrow.parquet as pq, datetime, pathlib
          snap = json.load(open("snapshot.json"))
          # normalize a single-row dataframe; make sure keys below exist in your snapshot
          row = {
              "timestamp_utc": datetime.datetime.utcnow().isoformat(timespec="seconds") + "Z",
              "spot": snap.get("spot"),
              "net_gex": snap.get("net_gex"),
              "net_gex_norm": snap.get("net_gex_norm"),
              "gamma_ratio": snap.get("gamma_ratio"),
              "zero_gamma": snap.get("zero_gamma"),
              "near_density": snap.get("near_density"),
          }
          df = pd.DataFrame([row])
          out = pathlib.Path("data") / "intraday" / "gex_intraday.parquet"
          if out.exists():
              # append
              old = pq.read_table(out)
              new = pa.Table.from_pandas(df)
              pq.write_table(pa.concat_tables([old, new]), out)
          else:
              pq.write_table(pa.Table.from_pandas(df), out)
          PY

      - name: Commit & push
        if: steps.nyse.outcome == 'success'
        run: |
          git config user.name  "github-actions"
          git config user.email "github-actions@github.com"
          git add data/
          git commit -m "GEX snapshot $(date -u +'%Y-%m-%d %H:%MZ')" || echo "No changes"
          # Rebase before push to avoid occasional conflicts if two runs overlap
          git pull --rebase origin ${{ github.ref_name }} || true
          git push
